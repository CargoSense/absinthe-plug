<!--
The request to this GraphQL server provided the header "Accept: text/html"
and as a result has been presented GraphiQL - an in-browser IDE for
exploring GraphQL.
If you wish to receive JSON, provide the header "Accept: application/json" or
add "&raw" to the end of the URL within a browser.
-->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>GraphiQL Workspace</title>

  <link rel="stylesheet" media="screen" href="<%= assets["bootstrap.css"] %>">
  <link rel="stylesheet" media="screen" href="<%= assets["graphiql.css"] %>">
  <link rel="stylesheet" media="screen" href="<%= assets["graphiql-workspace.css"] %>">

  <script src="<%= assets["react.js"] %>"></script>
  <script src="<%= assets["react-dom.js"] %>"></script>
  <script src="<%= assets["graphiql-workspace.js"] %>"></script>
  <%= if socket_url do %>
    <script src="<%= assets["phoenix.js"] %>"></script>
    <script src="<%= assets["absinthe-phoenix.js"] %>"></script>
  <% end %>
</head>
<body>
  <div id="workspace" class="graphiql-workspace"></div>

  <script type="text/javascript">
    <%= if socket_url do %>
      function absintheSubscriptionsClientBuilder(url, connectionParams) {
        var client = new AbsinthePhoenix.default(url, {params: connectionParams});

        // stop doing this eventually
        var serverSubscriptionId;
        client.old_subscribe = client.subscribe
        client.subscribe = function(doc, cb) {
          this.old_subscribe(doc, cb).then(function(resp) { serverSubscriptionId = resp.subscriptionId});
          // mock client generated subscription id
          return "1"
        };

        client.old_unsubscribe = client.unsubscribe
        client.unsubscribe = function(clientSubscriptionId) {
          this.old_unsubscribe(serverSubscriptionId);
        };

        client.dispatchSubscriptionCallback = function(resp, cb) {
          // GraphiQL wants the data as a string
          cb(JSON.stringify(resp.result, null, 2));
        }

        client.connect()
          .then(function () { console.log('Connected.'); })
          .catch(function (e) { console.error(`Couldn't connect`, e) });

        return client;
      }

      var protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    <% end %>

    var config = new graphiqlWorkspace.AppConfig("graphiql", {
      defaultUrl: <%= default_url %>,
      <%= if socket_url do %>
        defaultWebsocketUrl: <%= socket_url %>,
        subscriptionsClientBuilder: absintheSubscriptionsClientBuilder,
      <% end %>
      defaultQuery: '<%= query_string %>',
      defaultVariables: '<%= variables_string %>',
      defaultHeaders: <%= default_headers %>
    });

    ReactDOM.render(
      React.createElement(graphiqlWorkspace.GraphiQLWorkspace, {config: config}),
      document.getElementById('workspace')
    );
  </script>
</body>
</html>
