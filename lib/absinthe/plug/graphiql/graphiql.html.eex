<!--
The request to this GraphQL server provided the header "Accept: text/html"
and as a result has been presented GraphiQL - an in-browser IDE for
exploring GraphQL.
If you wish to receive JSON, provide the header "Accept: application/json" or
add "&raw" to the end of the URL within a browser.
-->
<!DOCTYPE html>
<html>
<head>
  <meta name="referrer" content="no-referrer" />
  <style>
    html, body {
      height: 100%;
      margin: 0;
      overflow: hidden;
      width: 100%;
    }
  </style>
  <link href="<%= assets["graphiql/graphiql.css"] %>" rel="stylesheet" />
  <script src="<%= assets["whatwg-fetch/fetch.js"] %>"></script>
  <script src="<%= assets["react/react.js"] %>"></script>
  <script src="<%= assets["react-dom/react-dom.js"] %>"></script>
  <script src="<%= assets["graphiql/graphiql.js"] %>"></script>
  <%= if socket_url do %>
    <script src="<%= assets["graphiql-subscriptions-fetcher/graphiql-subscriptions-fetcher.js"] %>"></script>
    <script src="<%= assets["phoenix/phoenix.js"] %>"></script>
    <script src="<%= assets["absinthe-phoenix/absinthe-phoenix.js"] %>"></script>
  <% end %>
</head>
<body>

  <script>
    // Collect the URL parameters
    var parameters = {};
    window.location.search.substr(1).split('&').forEach(function (entry) {
      var eq = entry.indexOf('=');
      if (eq >= 0) {
        parameters[decodeURIComponent(entry.slice(0, eq))] =
          decodeURIComponent(entry.slice(eq + 1));
      }
    });
    // Produce a Location query string from a parameter object.
    function locationQuery(params) {
      return '?' + Object.keys(params).map(function (key) {
        return encodeURIComponent(key) + '=' +
          encodeURIComponent(params[key]);
      }).join('&');
    }
    // Derive a fetch URL from the current URL, sans the GraphQL parameters.
    var graphqlParamNames = {
      query: true,
      variables: true,
      operationName: true
    };
    var otherParams = {};
    for (var k in parameters) {
      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {
        otherParams[k] = parameters[k];
      }
    }
    var fetchURL = locationQuery(otherParams);
    // Defines a GraphQL fetcher using the fetch API.
    function graphQLFetcher(graphQLParams) {
      return fetch(fetchURL, {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(graphQLParams),
        credentials: 'include',
      }).then(function (response) {
        return response.text();
      }).then(function (responseBody) {
        try {
          return JSON.parse(responseBody);
        } catch (error) {
          return responseBody;
        }
      });
    }

    <%= if socket_url do %>

      var protocol;
      if (window.location.protocol === "https:") {
        protocol = "wss:"
      } else {
        protocol = "ws:"
      }

      var client = new AbsinthePhoenix.default(<%= socket_url %>);
      // stop doing this eventually
      var serverSubscriptionId;
      client.old_subscribe = client.subscribe
      client.subscribe = function(doc, cb) {
        this.old_subscribe(doc, cb).then(function(resp) { serverSubscriptionId = resp.subscriptionId});
        // mock client generated subscription id
        return "1"
      };

      client.old_unsubscribe = client.unsubscribe
      client.unsubscribe = function(clientSubscriptionId) {
        this.old_unsubscribe(serverSubscriptionId);
      };

      client.dispatchSubscriptionCallback = function(resp, cb) {
        // GraphiQL wants the data as a string
        cb(JSON.stringify(resp.result, null, 2));
      }

      client.connect()
        .then(function () { console.log('Connected.'); })
        .catch(function (e) { console.error(`Couldn't connect`, e) });
      var graphQLFetcher = window.GraphiQLSubscriptionsFetcher.graphQLFetcher(client, graphQLFetcher);

    <% end %>
    // When the query and variables string is edited, update the URL bar so
    // that it can be easily shared.
    function onEditQuery(newQuery) {
      parameters.query = newQuery;
      updateURL();
    }
    function onEditVariables(newVariables) {
      parameters.variables = newVariables;
      updateURL();
    }
    function updateURL() {
      history.replaceState(null, null, locationQuery(parameters));
    }
    // Render <GraphiQL /> into the body.
    ReactDOM.render(
      React.createElement(GraphiQL, {
        fetcher: graphQLFetcher,
        onEditQuery: onEditQuery,
        onEditVariables: onEditVariables,
        query: '<%= query_string %>',
        response: '<%= result_string %>',
        variables: '<%= variables_string %>',
      }),
      document.body
    );
  </script>
</body>
</html>
